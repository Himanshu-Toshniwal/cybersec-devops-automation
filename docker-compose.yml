version: '3.8'

services:
  # Main Cybersecurity Application
  cybersec-app:
    image: himanshutoshniwal7570/cybersec-platform:latest
    build:
      context: .
      dockerfile: Dockerfile
    container_name: cybersec-platform
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=production
      - PYTHONPATH=/app
      - REDIS_URL=redis://redis:6379/0
      - POSTGRES_URL=postgresql://cybersec_user:cybersec_pass_2024@postgres:5432/cybersec_db
    volumes:
      - ./logs:/app/logs
      - ./reports:/app/reports
      - ./scans:/app/scans
      - ./data:/app/data
    depends_on:
      - redis
      - postgres
    restart: unless-stopped
    networks:
      - cybersec-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: cybersec-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass cybersec2024
    restart: unless-stopped
    networks:
      - cybersec-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL for storing scan results
  postgres:
    image: postgres:15-alpine
    container_name: cybersec-postgres
    environment:
      POSTGRES_DB: cybersec_db
      POSTGRES_USER: cybersec_user
      POSTGRES_PASSWORD: cybersec_pass_2024
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    networks:
      - cybersec-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cybersec_user -d cybersec_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy and load balancer
  nginx:
    image: nginx:alpine
    container_name: cybersec-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - cybersec-app
    restart: unless-stopped
    networks:
      - cybersec-network

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: cybersec-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'
    restart: unless-stopped
    networks:
      - cybersec-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: cybersec-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=cybersec2024
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - cybersec-network

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  cybersec-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1